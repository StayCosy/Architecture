安装
tar -xzvf 文件名.tar.gz
进入目录   make

在安装目录下有redis.conf文件修改redis.conf
daemonize no 改成yes

开启服务
./redis-server /etc/redis.conf
连接服务
./redis-cli

注意在windows下安装直接解压即可，但是解压完是不存在redis.conf文件的，需要下载或者到linux版本中拷贝一份即可

string 数据类型
1. SET/GET/APPEND/STRLEN
exists mykey
append mykey "hello"
append mykey "world"
get mykey
set mykey "this is a test"
get mykey
strlen mykey

2. INCR/DECR/INCRBY/DECRBY:
set mykey 20
incr mykey
decr mykey
del mykey
decr mykey   对空值执行递减操作，其原值被设定为0，递减后的值为-1
del mykey
incr mykey   对空值执行递增操作，其原值被设定为0，递增后的值为1
set mykey  "hello"
incr mykey     有错误信息
set mykey 10
decrby mykey 5
incrby mykey 10

3.GETSET:
incr mycounter     //将计数器的值原子性增1
getset mycounter 0   在获取计数器原有值的同时，并将其设置为新值，这两个操作原子性的同时完成
get mycounter

4.SETEX:
setex mykey 10 "hello"   #设置指定Key的过期时间为10秒。
ttl mykey  查看

5.SETNX
setnx mykey "hello"
setnx mykey "world"   //该键已经存在，无效

6. SETRANGE/GETRANGE:
set mykey "helloworld"
setrange mykey 6 dd  从第六个字节开始替换2个字节(dd只有2个字节)
get mykey 
setrange mykey 20 dd   已经超过该Key原有值的长度了，该命令将会在末尾补0。
get mykey
del mykey
setrange mykey 2 dd  替换空值
get mykey
set mykey "0123456789"
getrange mykey 1 2
getrange mykey 1 20   20已经超过Value的总长度，因此将截取第一个字节后面的所有字节

7.SETBIT/GETBIT
del mykey
setbit mykey 7 1  设置从0开始计算的第七位BIT值为1，返回原有BIT值0
get mykey
setbit mykey 6 1 设置从0开始计算的第六位BIT值为1，返回原有BIT值0
get mykey
getbit mykey 6#返回了指定的Offset的Bit值
getbit mykey 10#超出了value的长度返回0

8.MSET/MGET/MSETNX:
mset key1 "hello" key2 "world"
mget key1 key2
msetnx key3 "stephen" key4 "liu"
mget key3 key4
msetnx key3 "hello" key5 "world" 批量设置了key3和key5两个键，但是key3已经存在，所以该命令执行失败并返回0
mget key3 key5

List数据类型
1.LPUSH/LPUSHX/LRANGE
lpush mykey a b c d
lrange mykey 0 2
lrange mykey 0 -1
lpushx mykey2 e
lrange mykey2 0 -1
lpushx mykey e
lrange mykey 0 0
2.LPOP/LLEN
lpush mykey a b c d
lpop mykey
lpop mykey
llen mykey
3.LREM/LSET/LINDEX/LTRIM:
lpush mykey a b c d a c
lrem mykey 2 a#从头部(left)向尾部(right)变量链表，删除2个值等于a的元素，返回值为实际删除的数量。
lrange mykey 0 -1
lindex mykey 1
lset mykey 1 e
lindex mykey 1
lindex mykey 6
lset mykey 6 hh#设置的索引值6超过了链表中元素的数量，设置失败，该命令返回错误信息。
ltrim mykey 0 2
lrange mykey 0 -1
4.LINSERT
del mykey
lpush mykey a b c d e
linsert mykey before a a1
lindex mykey 0
linsert mykey after e e2
lindex mykey 1
linsert mykey after k a
linsert mykey1 after a a2
5.RPUSH/RPUSHX/RPOP/RPOPLPUSH
del mykey
rpush mykey a b c d
lrange mykey 0 -1
rpushx mykey e
lindex mykey 4
rpushx mykey2 e
rpoplpush mykey mykey2 
lrange mykey 0 -1
lrange mykey2 0 -1
rpoplpush mykey mykey
lrange mykey 0 -1


Hashes数据类型
1. HSET/HGET/HDEL/HEXISTS/HLEN/HSETNX:
hset myhash field1 "stephen"
hget myhash field1
hget myhash field2
hset myhash field2 "liu"
hlen myhash
hexists myhash field1
hdel myhash field1
hdel myhash field1
hexists myhash field1
hsetnx myhash field1 "stephen"
hsetnx myhash field1 "stephen"
2.HINCRBY
del myhash
hset myhash field 5
hincrby myhash field 1
hincrby myhash field -1
hincrby myhash field -10
3.HGETALL/HKEYS/HVALS/HMGET/HMSET
del myhash
hmset myhash field1 "hello" field2 "world"
hmget myhash field1 field2 field3
hgetall myhash
hkeys myhash
hvals myhash

Set数据类型
1. SADD/SMEMBERS/SCARD/SISMEMBER:
sadd myset a b c
sadd myset a d e
sismember myset a
sismember myset f
smembers myset
scard myset
2. SPOP/SREM/SRANDMEMBER/SMOVE:
del myset
sadd myset a b c d
smembers myset
srandmember myset
spop myset
smembers myset
srem myset a d f
smembers myset
sadd myset a b
sadd myset2 c d
smove myset myset2 a
smove myset myset2 a
smembers myset
smembers myset2
3. SDIFF/SDIFFSTORE/SINTER/SINTERSTORE:
sadd myset a b c d
sadd myset2 c
sadd myset3 a c e
sdiff myset myset2 myset3
sdiffstore diffkey myset myset2 myset3
smembers diffkey
sinter myset myset2 myset3#交集
sinterstore interkey myset myset2 myset3
smembers interkey
sunion myset myset2
sunionstore unionkey myset myset2 myset3
smembers unionkey

Sorted-Set数据类型
1.ZADD/ZCARD/ZCOUNT/ZREM/ZINCRBY/ZSCORE/ZRANGE/ZRANK:
zadd myzset 1 "one"
zadd myzset 2 "two" 3 "three"
zrange myzset 0 -1 WITHSCORES
zrank myzset one
zrand myzset four
zcard myzset
zcount myzset 1 2
zrem myzset one two
zcard myzset
zscore myzset three
zscore myzset two
zincrby myzset 2 one
zincrby myzset -1 one
zrange myzset 0 -1 WITHSCORES
2. ZRANGEBYSCORE/ZREMRANGEBYRANK/ZREMRANGEBYSCORE
del myzset
zadd myzset 1 one 2 two 3 three 4 four
zrangebyscore myzset 1 2
zrangebyscore myzset(1 2
zrangebyscore myzset -inf +inf limit 2 3
zremrangebyscore myzset 1 2
zrange myzset 0 -1
zremrangebyrank myzset 0 1
zcard myzset
3. ZREVRANGE/ZREVRANGEBYSCORE/ZREVRANK:
del myset
zadd myzset 1 one 2 two 3 three 4 four
zrevrange myzset 0 -1 WITHSCORES
zrevrange myzset 1 3
zrevrank myzset one
zrevrank myzset four
zrevrangebyscore myzset 3 0
zrevrangebyscore myzset 4 0 limit 1 2
------------------------------------------------------

key操作命令
1. KEYS/RENAME/DEL/EXISTS/MOVE/RENAMENX:
flushdb
set mykey 2
set mykey2 "hello"
sadd mysetkey 1 2 3
hset mmtest  username"stephen"
keys my*
del mykey mykey2
exists mykey
exists mysetkey
move mysetkey 1
select 1
exists mysetkey
select 0
exists mysetkey
set mykey "hello"
rename mykey mykey1
get mykey
get mykey1
rename mykey mykey1
set oldkey "hello"
set newkey "world"
renamenx oldkey newkey
get newkey

2. PERSIST/EXPIRE/EXPIREAT/TTL: 
set mykey "hello"
expire mykey 100
ttl mykey
persist mykey
ttl mykey
del mykey
set mykey "hello"
expire mykey 100
ttl mykey
expire mykey 20
ttl mykey 
set mykey "world"
ttl mykey
3. TYPE/RANDOMKEY/SORT:
type mm
type mykey
sadd mysetkey 1 2
type mysetkey
randomkey
flushdb
randomkey


事务
成功
multi
incr t1
incr t2
exec
失败
multi
set a 3
lpop a
set a 4
get a
exec
回滚
set t2 tt
multi
set t2 ttnew
discard
get t2


主从复制
slaveof 127.0.0.1 6379


pub/sub 
发布订阅(pub/sub)是一种消息通信模式，主要的目的是解耦消息发布者和消息订阅者之间的耦合，这点和设计模式中的观察者模式比较相似。pub /sub不仅仅解决发布者和订阅者直接代码级别耦合也解决两者在物理部署上的耦合。redis作为一个pub/sub server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe和psubscribe命令向redis server订阅自己感兴趣的消息类型，redis将消息类型称为通道(channel)。当发布者通过publish命令向redis server发送特定类型的消息时。订阅该消息类型的全部client都会收到此消息。这里消息的传递是多对多的。一个client可以订阅多个 channel,也可以向多个channel发送消息。不过这个功能在redis中，被设计的非常轻量级和简洁，它做到了消息的“发布”和“订阅”的基本能力，但是尚未提供JMS中关于消息的持久化/耐久性等各种企业级的特性。
一个Redis client发布消息，其他多个redis client订阅消息，发布的消息“即发即失”，redis不会持久保存发布的消息；消息订阅者也将只能得到订阅之后的消息，通道中此前的消息将无从获得。这就类似于JMS中“非持久”类型的消息。
消息发布者，即publish客户端，无需独占链接，你可以在publish消息的同时，使用同一个redis-client链接进行其他操作（例如：INCR等）
    消息订阅者，即subscribe客户端，需要独占链接，即进行subscribe期间，redis-client无法穿插其他操作，此时client以阻塞的方式等待“publish端”的消息；这一点很好理解，因此subscribe端需要使用单独的链接，甚至需要在额外的线程中使用。
    一旦subscribe端断开链接，将会失去部分消息，如果你非常关注每个消息，那么你应该考虑使用JMS或者基于Redis做一些额外的补充工作，如果你期望订阅是持久的，那么如下的设计思路可以借鉴（如下原理基于JMS）：
    1) subscribe端首先向一个Set集合中增加“订阅者ID”，此Set集合保存了“活跃订阅”者，订阅者ID标记每个唯一的订阅者，例如：sub:email,sub:web。此SET称为“活跃订阅者集合”
    2) subcribe端开启订阅操作，并基于Redis创建一个以“订阅者ID”为KEY的LIST数据结构，此LIST中存储了所有的尚未消费的消息。此LIST称为“订阅者消息队列”
    3) publish端：每发布一条消息之后，publish端都需要遍历“活跃订阅者集合”，并依次向每个“订阅者消息队列”尾部追加此次发布的消息。
    4) 到此为止，我们可以基本保证，发布的每一条消息，都会持久保存在每个“订阅者消息队列”中。
    5) subscribe端，每收到一个订阅消息，在消费之后，必须删除自己的“订阅者消息队列”头部的一条记录。
    6) subscribe端启动时，如果发现自己的自己的“订阅者消息队列”有残存记录，那么将会首先消费这些记录，然后再去订阅。
案例1：
redis-cli
subscribe first second

redis-cli
publish first wangbin
publish second wangbing_second
1. 先启动你redis-server
2. 启动一个redis-cli订阅一个使用通配符的通道(*表示任意字符串):
redis-cli
redis 127.0.0.1:6379> psubscribe store.goods.*
3. 启动另一个redis-cli:
redis-cli
redis 127.0.0.1:6379> subscribe store.goods.add_msg
4.4.再启动一个redis-cli用来发布消息
redis-cli
redis 127.0.0.1:6379> publish store.goods.del_msg “delete goods!”
(integer) 1
redis 127.0.0.1:6379> publish store.goods.add_msg “add goods”
(integer) 2 





