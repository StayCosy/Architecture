9:00-12:00  14:00-17：00
主要内容：
1.架构综述
2.数据存储架构
3.缓存架构
4.负载均衡
5.应用层架构
6.基础设施架构


一、架构综述
1.高性能
----->以b/s结构为例（用户从请求发送到拿到响应所花费的时间)
   ----->时间都花到哪去了?
      ---->请求数据响应数据发送和传输的时间
          ---->带宽（发送速度）
	  ---->数据量
      ---->服务器处理的时间
          ---->JVM环境
	  ---->webServer环境
	  ---->业务（服务）
	  ---->数据库（集群、单个数据库优化）
      ----->浏览器渲染的时间
          ---->js,css

   ----->案例
       ------>竞拍活动
          ---->功能  （出价，最高者得）
	  ---->最核心：最后几秒可能是高并发的
	               最后几秒不能阻塞任何出价请求

   ----->架构合理之后，点上的优化效果才更好。
	  
2.高可扩展性
   ------>项目的可伸缩性
   ------>代码的可扩展性
      ----->面向对象设计、设计模式、代码重构
      ----->线程异步案例
          ---->AOP思想（专家模式）
	  ---->IOC思想
	     ---->控制反转
	     ---->依赖注入只是一种具体的解耦方式。

3.高可用性
------>备份、容灾、负载

总结：更多去关注一些非功能性需求



二、数据存储架构
1.关系型数据库如何从集中式走向分布式
------->垂直拆分
  ----->按功能模块拆分数据
  ----->问题
     ---->join问题
        ---->两次查询
	---->有的时候即使在同一数据源内使用join都达不到性能要求
	   ----->适当冗余数据避免join
	---->预先查询并缓存（需要有热点存在）
	---->考虑其它类型数据源
    ----->事务的问题
        ----->分布式的事务（高并发的情况下高可用是不可能达到的）
	----->即使在同一个数据源内也不建议使用大事务
	   ---->一些策略
	      ---->独立的小事务，事务补偿机制，定期检测数据
	      ---->独立的小事务，后置提交机制，定期检测数据
	      ---->CAP原理
	         ---->C代表强一致性，A代表高可用性，P代表分布式
		 ---->三者只能选择其二
		    ---->AP+BASE,通过消息中间件解耦
    ----->拆分到一定程度就无法继续拆分了。

--------->读写分离
    ------>数据库都有主备机制
    ------>主库做些，备库做读
    ------>读多写少，一主多备
    ------>垂直拆分之前就可以读写分离，垂直之后也可以读写分离
    ------>问题
       ---->如何控制读写
       ---->主库和备库数据不一致（延迟导致）
         ---->写完之后立即读到最新的。
	   ---->写缓存的方式
	   ---->半同步复制的方式
       ----->多个备库数据不一致（延迟导致）
           ----->一般不会在数据库上做处理
	   ----->大部分转移到应用端根据业务
	      ----->不保证读的一致性，保证写不问题。
	      ----->模拟微信案例，转移到客户端写
       ----->异构数据源之间的读写分离
           ---->异构数据源之间的全量复制
	   ---->异构数据源之间的增量同步

---------->水平拆分
    ------->按记录拆分数据（把一张大表拆分成多张小表）
        ---->有可能只分表，也有可能是分库分表
    ------->问题
        ----->拆分标准
	   ----->查询的时候要能快速定位数据在哪张小表中.
	   ----->全局主键策略
	----->统计、分页

----------->数据切分之后的整合工作
    ----->建议让集群对应用透明
       ---->mycat/dble/amoeba/myproxy


2.非结构化数据的存储
--------->并不是所有数据都适合存放在关系型数据库中
   ----->流水队列数据
   ----->二进制多媒体数据
   ----->商品属性数据
   ----->大文本数据
---------->思考：
    ----->电子商务的商品数据如何设计表
       ---->基本数据（名称、价格..)   关系型数据库
       ---->图片     分布式文件系统
       ---->评价     文档数据库
       ---->属性     列数据库
       ---->关键字   搜索引擎
    ----->58同城的帖子如何设计表
        ----->属性在不停的扩展
    ----->根据不同场景选择不同数据源。
    
-------->nosql 简介
    ----->对性能的关注远远大于对ACID的关注
    ----->在细分方向上做到了极致（有可能一选择就是一组）
    ----->nosql的分类
       ----->内存数据库  key/value   Memcached,Redis,GemFire
       ----->文档数据库   bson(二进制的json)  Mongodb,CouchDB
       ----->列数据库     HBase,Cassandra
       ----->图数据库   存放的是关系    neo4j,flockdb
    ----->分布式的文件系统并没有包含在NOSQL的分类中
       ----->HDFS,TFS,GFS,CEPT...


3.分享淘宝数据魔方技术架构
------>层次
   ----->数据源层、计算层、存储层、（查询层）
------>工具
   ----->TimeTunnel2
     ---->tailFile2   读增量
     ---->saveFile    转存数据
     ---->DfsWrier    写入hdfs  
   ----->DataX
       ----->异构数据源之间导入导出数据的工具
       ----->框架+插件模式
         ---->mysql/oracle/sqlserver/hbase/hdfs 互相的导入导出都能够直接支持

4.数据库的优化
------->数据库的执行原理
   ----->优化器模块
   ----->执行计划
   ----->硬解析、软解析
   ----->逻辑Io,物理io
   ----->段区块

------->查询优化
   ----->索引的问题
   ----->重量级关键字的执行原理
     --->join
     --->order by
     ---->group by
     ---->... ...

-------->数据库设计
  ----->原则上遵循范式
  ----->范式和非范式的结合使用
      ----->适当冗余数据避免join
      ----->大字段垂直拆分  or引入其它数据源
      ----->常用字段和不常用字段垂直拆分
      ----->大表水平拆分


三、合理的缓存架构
1.b/s结构的项目中哪些缓存可以用呢?
------>页面缓存
   ----->页面数据基本不变，每次查询都从后台获取而来
   ----->可以把整个页面缓存起来
   ----->可以使用OSCache,EHCache提供的页面缓存技术
   ----->页面数据基本不变，也可以考虑页面静态化
 